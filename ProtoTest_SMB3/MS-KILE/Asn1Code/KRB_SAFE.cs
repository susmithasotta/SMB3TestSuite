// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.10, Date: 01-Jul-2008.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace Microsoft.Protocols.TestTools.StackSdk.Security.Kile {

   public class KRB_SAFE : Asn1Type {
      public new readonly static Asn1Tag _TAG = new Asn1Tag (Asn1Tag.APPL, Asn1Tag.CONS, 20);

      public Asn1Integer pvno;
      public Asn1Integer msg_type;
      public KRB_SAFE_BODY safe_body;
      public Checksum cksum;

      public KRB_SAFE () : base()
      {
         Init();
         SetKey (_KerberosV5Spec2Values._rtkey);
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public KRB_SAFE (
         Asn1Integer pvno_,
         Asn1Integer msg_type_,
         KRB_SAFE_BODY safe_body_,
         Checksum cksum_
      )
         : base ()
      {
         pvno = pvno_;
         msg_type = msg_type_;
         safe_body = safe_body_;
         cksum = cksum_;
         SetKey (_KerberosV5Spec2Values._rtkey);
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public KRB_SAFE (long pvno_,
         long msg_type_,
         KRB_SAFE_BODY safe_body_,
         Checksum cksum_
      )
         : base ()
      {
         pvno = new Asn1Integer (pvno_);
         msg_type = new Asn1Integer (msg_type_);
         safe_body = safe_body_;
         cksum = cksum_;
         SetKey (_KerberosV5Spec2Values._rtkey);
      }

      public void Init () {
         pvno = null;
         msg_type = null;
         safe_body = null;
         cksum = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, _TAG) : implicitLength;

         int llen2 = llen;
         llen = MatchTag (buffer, Asn1Tag.SEQUENCE);

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode pvno

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            pvno = new Asn1Integer();
            pvno.Decode (buffer, true, elemLen.mValue);
            if (!(pvno.mValue == 5)) {
               throw new Asn1ConsVioException ("pvno.mValue", pvno.mValue);
            }

            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode msg_type

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            msg_type = new Asn1Integer();
            msg_type.Decode (buffer, true, elemLen.mValue);
            if (!(msg_type.mValue == 20)) {
               throw new Asn1ConsVioException ("msg_type.mValue", msg_type.mValue);
            }

            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode safe_body

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
            safe_body = new KRB_SAFE_BODY();
            safe_body.Decode (buffer, true, elemLen.mValue);
            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode cksum

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
            cksum = new Checksum();
            cksum.Decode (buffer, true, elemLen.mValue);
            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }
         else throw new Asn1MissingRequiredException (buffer);

         if (llen == Asn1Status.INDEFLEN) {
            MatchTag (buffer, Asn1Tag.EOC);
         }
         if (explicitTagging && llen2 == Asn1Status.INDEFLEN) {
            MatchTag (buffer, Asn1Tag.EOC);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode cksum

         len = cksum.Encode (buffer, true);
         _aal += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
         _aal += len;

         // encode safe_body

         len = safe_body.Encode (buffer, true);
         _aal += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
         _aal += len;

         // encode msg_type

         if (!(msg_type.mValue == 20)) {
            throw new Asn1ConsVioException ("msg_type.mValue", msg_type.mValue);
         }

         len = msg_type.Encode (buffer, true);
         _aal += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;

         // encode pvno

         if (!(pvno.mValue == 5)) {
            throw new Asn1ConsVioException ("pvno.mValue", pvno.mValue);
         }

         len = pvno.Encode (buffer, true);
         _aal += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;

         _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (_TAG, _aal);
         }

         return (_aal);
      }

   }
}
