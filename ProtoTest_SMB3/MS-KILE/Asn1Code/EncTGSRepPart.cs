// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.07, Date: 03-Sep-2009.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace Microsoft.Protocols.TestTools.StackSdk.Security.Kile {

   public class EncTGSRepPart : EncKDCRepPart {
      public new readonly static Asn1Tag _TAG = new Asn1Tag (Asn1Tag.APPL, Asn1Tag.CONS, 26);

      public EncTGSRepPart () : base()
      {
         SetKey (_KerberosV5Spec2Values._rtkey);
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public EncTGSRepPart (
         EncryptionKey key_,
         LastReq last_req_,
         UInt32 nonce_,
         KerberosTime key_expiration_,
         TicketFlags flags_,
         KerberosTime authtime_,
         KerberosTime starttime_,
         KerberosTime endtime_,
         KerberosTime renew_till_,
         Realm srealm_,
         PrincipalName sname_,
         HostAddresses caddr_,
         PA_DATAS pa_datas_
      )
         : base (key_, last_req_, nonce_, key_expiration_, flags_, authtime_, starttime_, endtime_, renew_till_, srealm_, sname_, caddr_, pa_datas_)
      {
         SetKey (_KerberosV5Spec2Values._rtkey);
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public EncTGSRepPart (
         EncryptionKey key_,
         LastReq last_req_,
         UInt32 nonce_,
         TicketFlags flags_,
         KerberosTime authtime_,
         KerberosTime endtime_,
         Realm srealm_,
         PrincipalName sname_
      )
         : base (key_, last_req_, nonce_, flags_, authtime_, endtime_, srealm_, sname_)
      {
         SetKey (_KerberosV5Spec2Values._rtkey);
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public EncTGSRepPart (EncryptionKey key_,
         LastReq last_req_,
         long nonce_,
         string key_expiration_,
         TicketFlags flags_,
         string authtime_,
         string starttime_,
         string endtime_,
         string renew_till_,
         string srealm_,
         PrincipalName sname_,
         HostAddresses caddr_,
         PA_DATAS pa_datas_
      )
         : base (key_, last_req_, nonce_, key_expiration_, flags_, authtime_, starttime_, endtime_, renew_till_, srealm_, sname_, caddr_, pa_datas_)
      {
         SetKey (_KerberosV5Spec2Values._rtkey);
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public EncTGSRepPart (
         EncryptionKey key_,
         LastReq last_req_,
         long nonce_,
         TicketFlags flags_,
         string authtime_,
         string endtime_,
         string srealm_,
         PrincipalName sname_
      )
         : base (key_, last_req_, nonce_, flags_, authtime_, endtime_, srealm_, sname_)
      {
         SetKey (_KerberosV5Spec2Values._rtkey);
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = implicitLength;

         if (explicitTagging) {
            llen = MatchTag (buffer, _TAG);
         }

         base.Decode (buffer, true, llen);

         if (explicitTagging && llen == Asn1Status.INDEFLEN) {
            MatchTag (buffer, Asn1Tag.EOC);
         }

      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = base.Encode (buffer, true);

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (_TAG, _aal);
         }

         return (_aal);
      }

   }
}
