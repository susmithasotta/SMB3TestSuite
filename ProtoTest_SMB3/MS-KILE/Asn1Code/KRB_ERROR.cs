// 
// This file was generated by the Objective Systems ASN1C Compiler
// (http://www.obj-sys.com).  Version: 6.10, Date: 01-Jul-2008.
// 
using System;
using Com.Objsys.Asn1.Runtime;

namespace Microsoft.Protocols.TestTools.StackSdk.Security.Kile {

   public class KRB_ERROR : Asn1Type {
      public new readonly static Asn1Tag _TAG = new Asn1Tag (Asn1Tag.APPL, Asn1Tag.CONS, 30);

      public Asn1Integer pvno;
      public Asn1Integer msg_type;
      public KerberosTime ctime;  // optional
      public Microseconds cusec;  // optional
      public KerberosTime stime;
      public Microseconds susec;
      public Int32 error_code;
      public Realm crealm;  // optional
      public PrincipalName cname;  // optional
      public Realm realm;
      public PrincipalName sname;
      public KerberosString e_text;  // optional
      public Asn1OctetString e_data;  // optional

      public KRB_ERROR () : base()
      {
         Init();
         SetKey (_KerberosV5Spec2Values._rtkey);
      }

      /// <summary>
      /// This constructor sets all elements to references to the 
      /// given objects
      /// </summary>
      public KRB_ERROR (
         Asn1Integer pvno_,
         Asn1Integer msg_type_,
         KerberosTime ctime_,
         Microseconds cusec_,
         KerberosTime stime_,
         Microseconds susec_,
         Int32 error_code_,
         Realm crealm_,
         PrincipalName cname_,
         Realm realm_,
         PrincipalName sname_,
         KerberosString e_text_,
         Asn1OctetString e_data_
      )
         : base ()
      {
         pvno = pvno_;
         msg_type = msg_type_;
         ctime = ctime_;
         cusec = cusec_;
         stime = stime_;
         susec = susec_;
         error_code = error_code_;
         crealm = crealm_;
         cname = cname_;
         realm = realm_;
         sname = sname_;
         e_text = e_text_;
         e_data = e_data_;
         SetKey (_KerberosV5Spec2Values._rtkey);
      }

      /// <summary>
      /// This constructor is for required elements only.  It sets 
      /// all elements to references to the given objects
      /// </summary>
      public KRB_ERROR (
         Asn1Integer pvno_,
         Asn1Integer msg_type_,
         KerberosTime stime_,
         Microseconds susec_,
         Int32 error_code_,
         Realm realm_,
         PrincipalName sname_
      )
         : base ()
      {
         pvno = pvno_;
         msg_type = msg_type_;
         stime = stime_;
         susec = susec_;
         error_code = error_code_;
         realm = realm_;
         sname = sname_;
         SetKey (_KerberosV5Spec2Values._rtkey);
      }

      /// <summary>
      /// This constructor allows primitive data to be passed for all 
      /// primitive elements.  It will create new object wrappers for 
      /// the primitive data and set other elements to references to 
      /// the given objects 
      /// </summary>
      public KRB_ERROR (long pvno_,
         long msg_type_,
         string ctime_,
         long cusec_,
         string stime_,
         long susec_,
         long error_code_,
         string crealm_,
         PrincipalName cname_,
         string realm_,
         PrincipalName sname_,
         string e_text_,
         byte[] e_data_
      )
         : base ()
      {
         pvno = new Asn1Integer (pvno_);
         msg_type = new Asn1Integer (msg_type_);
         ctime = new KerberosTime (ctime_);
         cusec = new Microseconds (cusec_);
         stime = new KerberosTime (stime_);
         susec = new Microseconds (susec_);
         error_code = new Int32 (error_code_);
         crealm = new Realm (crealm_);
         cname = cname_;
         realm = new Realm (realm_);
         sname = sname_;
         e_text = new KerberosString (e_text_);
         e_data = new Asn1OctetString (e_data_);
         SetKey (_KerberosV5Spec2Values._rtkey);
      }

      /// <summary>
      /// This constructor is for required elements only.  It allows 
      /// primitive data to be passed for all primitive elements.  
      /// It will create new object wrappers for the primitive data 
      /// and set other elements to references to the given objects. 
      /// </summary>
      public KRB_ERROR (
         long pvno_,
         long msg_type_,
         string stime_,
         long susec_,
         long error_code_,
         string realm_,
         PrincipalName sname_
      )
         : base ()
      {
         pvno = new Asn1Integer (pvno_);
         msg_type = new Asn1Integer (msg_type_);
         stime = new KerberosTime (stime_);
         susec = new Microseconds (susec_);
         error_code = new Int32 (error_code_);
         realm = new Realm (realm_);
         sname = sname_;
         SetKey (_KerberosV5Spec2Values._rtkey);
      }

      public void Init () {
         pvno = null;
         msg_type = null;
         ctime = null;
         cusec = null;
         stime = null;
         susec = null;
         error_code = null;
         crealm = null;
         cname = null;
         realm = null;
         sname = null;
         e_text = null;
         e_data = null;
      }

      public override void Decode
         (Asn1BerDecodeBuffer buffer, bool explicitTagging, int implicitLength)
      {
         int llen = (explicitTagging) ?
            MatchTag (buffer, _TAG) : implicitLength;

         int llen2 = llen;
         llen = MatchTag (buffer, Asn1Tag.SEQUENCE);

         Init ();

         // decode SEQUENCE

         Asn1BerDecodeContext _context =
            new Asn1BerDecodeContext (buffer, llen);

         IntHolder elemLen = new IntHolder();

         // decode pvno

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 0, elemLen, true)) {
            pvno = new Asn1Integer();
            pvno.Decode (buffer, true, elemLen.mValue);
            if (!(pvno.mValue == 5)) {
               throw new Asn1ConsVioException ("pvno.mValue", pvno.mValue);
            }

            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode msg_type

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 1, elemLen, true)) {
            msg_type = new Asn1Integer();
            msg_type.Decode (buffer, true, elemLen.mValue);
            if (!(msg_type.mValue == 30)) {
               throw new Asn1ConsVioException ("msg_type.mValue", msg_type.mValue);
            }

            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode ctime

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 2, elemLen, true)) {
            ctime = new KerberosTime();
            ctime.Decode (buffer, true, elemLen.mValue);
            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }

         // decode cusec

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 3, elemLen, true)) {
            cusec = new Microseconds();
            cusec.Decode (buffer, true, elemLen.mValue);
            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }

         // decode stime

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 4, elemLen, true)) {
            stime = new KerberosTime();
            stime.Decode (buffer, true, elemLen.mValue);
            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode susec

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 5, elemLen, true)) {
            susec = new Microseconds();
            susec.Decode (buffer, true, elemLen.mValue);
            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode error_code

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 6, elemLen, true)) {
            error_code = new Int32();
            error_code.Decode (buffer, true, elemLen.mValue);
            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode crealm

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 7, elemLen, true)) {
            crealm = new Realm();
            crealm.Decode (buffer, true, elemLen.mValue);
            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }

         // decode cname

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 8, elemLen, true)) {
            cname = new PrincipalName();
            cname.Decode (buffer, true, elemLen.mValue);
            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }

         // decode realm

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 9, elemLen, true)) {
            realm = new Realm();
            realm.Decode (buffer, true, elemLen.mValue);
            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode sname

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 10, elemLen, true)) {
            sname = new PrincipalName();
            sname.Decode (buffer, true, elemLen.mValue);
            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }
         else throw new Asn1MissingRequiredException (buffer);

         // decode e_text

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 11, elemLen, true)) {
            e_text = new KerberosString();
            e_text.Decode (buffer, true, elemLen.mValue);
            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }

         // decode e_data

         if (_context.MatchElemTag (Asn1Tag.CTXT, Asn1Tag.CONS, 12, elemLen, true)) {
            e_data = new Asn1OctetString();
            e_data.Decode (buffer, true, elemLen.mValue);
            if (elemLen.mValue == Asn1Status.INDEFLEN) {
               MatchTag (buffer, Asn1Tag.EOC);
            }
         }

         if (llen == Asn1Status.INDEFLEN) {
            MatchTag (buffer, Asn1Tag.EOC);
         }
         if (explicitTagging && llen2 == Asn1Status.INDEFLEN) {
            MatchTag (buffer, Asn1Tag.EOC);
         }
      }

      public override int Encode (Asn1BerEncodeBuffer buffer, bool explicitTagging)
      {
         int _aal = 0, len;

         // encode e_data

         if (e_data != null) {
            len = e_data.Encode (buffer, true);
            _aal += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 12, len);
            _aal += len;
         }

         // encode e_text

         if (e_text != null) {
            len = e_text.Encode (buffer, true);
            _aal += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 11, len);
            _aal += len;
         }

         // encode sname

         len = sname.Encode (buffer, true);
         _aal += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 10, len);
         _aal += len;

         // encode realm

         len = realm.Encode (buffer, true);
         _aal += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 9, len);
         _aal += len;

         // encode cname

         if (cname != null) {
            len = cname.Encode (buffer, true);
            _aal += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 8, len);
            _aal += len;
         }

         // encode crealm

         if (crealm != null) {
            len = crealm.Encode (buffer, true);
            _aal += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 7, len);
            _aal += len;
         }

         // encode error_code

         len = error_code.Encode (buffer, true);
         _aal += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 6, len);
         _aal += len;

         // encode susec

         len = susec.Encode (buffer, true);
         _aal += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 5, len);
         _aal += len;

         // encode stime

         len = stime.Encode (buffer, true);
         _aal += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 4, len);
         _aal += len;

         // encode cusec

         if (cusec != null) {
            len = cusec.Encode (buffer, true);
            _aal += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 3, len);
            _aal += len;
         }

         // encode ctime

         if (ctime != null) {
            len = ctime.Encode (buffer, true);
            _aal += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 2, len);
            _aal += len;
         }

         // encode msg_type

         if (!(msg_type.mValue == 30)) {
            throw new Asn1ConsVioException ("msg_type.mValue", msg_type.mValue);
         }

         len = msg_type.Encode (buffer, true);
         _aal += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 1, len);
         _aal += len;

         // encode pvno

         if (!(pvno.mValue == 5)) {
            throw new Asn1ConsVioException ("pvno.mValue", pvno.mValue);
         }

         len = pvno.Encode (buffer, true);
         _aal += buffer.EncodeTagAndLength (Asn1Tag.CTXT, Asn1Tag.CONS, 0, len);
         _aal += len;

         _aal += buffer.EncodeTagAndLength (Asn1Tag.SEQUENCE, _aal);

         if (explicitTagging) {
            _aal += buffer.EncodeTagAndLength (_TAG, _aal);
         }

         return (_aal);
      }

   }
}
