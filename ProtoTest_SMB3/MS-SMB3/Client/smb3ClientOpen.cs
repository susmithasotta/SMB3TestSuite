//-------------------------------------------------------------------------
// Copyright(c) 2009 Microsoft Corporation
// All rights reserved
// 
// Module Name: smb3ClientOpen
// Description: A stucture contains information about Open
//-------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Microsoft.Protocols.TestTools.StackSdk.FileAccessService.smb3
{
    /// <summary>
    /// OperationBucket
    /// </summary>
    public class OperationBucket
    {
        internal bool free;
        internal byte sequenceNumber;

        /// <summary>
        /// Free
        /// </summary>
        public bool Free
        {
            get
            {
                return free;
            }
        }


        /// <summary>
        /// SequenceNumber
        /// </summary>
        public byte SequenceNumber
        {
            get
            {
                return sequenceNumber;
            }
        }
    }

    /// <summary>
    /// A stucture contains information about Open
    /// </summary>
    public class smb3ClientOpen
    {
        internal uint clientLocalId;
        internal FILEID fileId;
        internal uint maximalAccess;
        internal smb3ClientTreeConnect treeConnect;
        internal smb3ClientConnection connection;
        internal OplockLevel_Values oplockLevel;
        internal bool durable;
        internal FilePath fileName;
        internal bool resilientHandle;
        internal TimeSpan resilientTimeout;
        internal OperationBucket[] operationBuckets;

        /// <summary>
        /// An identifier generated by the client to return to higher-level applications to allow them to reference this open.
        /// </summary>
        public uint ClientLocalId
        {
            get
            {
                return clientLocalId;
            }
        }

        /// <summary>
        /// The SMB2_FILEID, as specified in section 2.2.14.1, returned by the server for this open.
        /// </summary>
        public FILEID FileId
        {
            get
            {
                return fileId;
            }
        }

        /// <summary>
        /// The maximal rights that the security principal, as specified in Open.TreeConnect.Session,
        /// has on the file or named pipe. This MUST be an access mask value, as specified in section 2.2.13.1
        /// </summary>
        public uint MaximalAccess
        {
            get
            {
                return maximalAccess;
            }
        }

        /// <summary>
        /// A reference to the tree connect on which this Open was established
        /// </summary>
        public smb3ClientTreeConnect TreeConnect
        {
            get
            {
                return treeConnect;
            }
        }

        /// <summary>
        /// A reference to the smb3 transport connection on which this open was established.
        /// </summary>
        public smb3ClientConnection Connection
        {
            get
            {
                return connection;
            }
        }

        /// <summary>
        /// The current oplock level for this open.
        /// </summary>
        public OplockLevel_Values OplockLevel
        {
            get
            {
                return oplockLevel;
            }
        }

        /// <summary>
        /// A Boolean that indicates whether this open is setup for reestablishment after a disconnect.
        /// </summary>
        public bool Durable
        {
            get
            {
                return durable;
            }
        }

        /// <summary>
        /// A Unicode string with the name of the file.
        /// </summary>
        public FilePath FileName
        {
            get
            {
                return fileName;
            }
        }

        /// <summary>
        /// A Boolean that indicates whether resiliency was granted for this open by the server.
        /// </summary>
        public bool ResilientHandle
        {
            get
            {
                return resilientHandle;
            }
        }

        /// <summary>
        /// The minimum time (in milliseconds) for which the server will hold this open, 
        /// while waiting for the client to reestablish the open after a network disconnect.
        /// </summary>
        public TimeSpan ResilientTimeout
        {
            get
            {
                return resilientTimeout;
            }
        }

        /// <summary>
        /// An array of 64 elements
        /// </summary>
        public OperationBucket[] OperationBuckets
        {
            get
            {
                if (operationBuckets == null)
                {
                    return null;
                }
                else
                {
                    return (OperationBucket[])operationBuckets.Clone();
                }
            }
        }
    }
}
